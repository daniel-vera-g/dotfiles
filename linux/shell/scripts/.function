#!/usr/bin/env bash

# Commands that are too complex for an alias (and perhaps too small for a stand-alone script) can be defined in a function.
# Functions can take arguments, making them more powerful

source ~/dotfiles/linux/shell/scripts/misc/quitcd.bash_zsh

# Source: https://gist.github.com/premek/6e70446cfc913d3c929d7cdbfe896fef
# Usage: mv oldfilename
# If you call mv without the second parameter it will prompt you to edit the filename on command line.
# Original mv is called when it's called with more than one argument.
# It's useful when you want to change just a few letters in a long name.
#
# Also see:
# - imv from renameutils
# - Ctrl-W Ctrl-Y Ctrl-Y (cut last word, paste, paste)
function mv() {
  if [ "$#" -ne 1 ] || [ ! -e "$1" ]; then
    command mv "$@"
    return
  fi

  read -ei "$1" newfilename
  command mv -v -- "$1" "$newfilename"
}

# Search for String in all the PDFs in the current folder
function searchPDF() {
  for f in ./*; do echo $f;  pdftotext $f - | rg "$@"; done
}

# Install .deb Programm
function Ideb() {
  curl -LOs $@ && sudo dpkg -i $(basename $@)
}

# ls on cd
function lcd {
    builtin cd "$@" && ls
}

# Run caffeine command for specific time
caffX() {
    caffeinate  sleep $@m &
}

# Convert file(s) into tar
# and compress them with the xz compression algorithm
tarxz() {
    tar -cJvf ./$@.tar.xz $@
}

# Open a new Terminator window + tmux session
# Close the Window when tmux gets detached
tI() {
    terminator -e "tmux attach -t $@" &
}

# Open an Application as job & not block cmdline
O() {
   "$@" &> /dev/null &
}

# Open pdf as job & not block cmdline
O() {
    "$@" &> /dev/null &
}

# Check for an existent alias
chal() {
    alias | rg "$@"
}

# Find app related files on system
fApp() {
    fd --hidden --no-ignore "$@" ./
}

# Create a new directory and enter it
function mk() {
  mkdir -p "$@" && cd "$@"
}

# Open man page as PDF -> TODO
# function manpdf() {
#  man -t "${1}" | open -f -a /Applications/Preview.app/
# }

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# queries the cht.sh cheatsheet of various Unix commands
function cheat() {
      curl cht.sh/$1
  }
